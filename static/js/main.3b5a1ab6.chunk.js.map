{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","runCode","state","html","css","js","document","refs","iframe","contentDocument","documentContents","open","write","close","id","this","setState","pushid","codeMirrorOptions","theme","lineNumbers","scrollbarStyle","lineWrapping","className","value","options","mode","onBeforeChange","editor","data","title","ref","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"yUAgImBA,G,oFAhHb,aAAe,IAAD,8BACZ,gBAmBFC,QAAU,WACR,MAA0B,EAAKC,MAAvBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,GAGbC,EADS,EAAKC,KAAKC,OACDC,gBAClBC,EAAgB,wVASdN,EATc,oFAahBD,EAbgB,8EAgBdE,EAhBc,4EAsBtBC,EAASK,OACTL,EAASM,MAAMF,GACfJ,EAASO,SA/CT,EAAKX,MAAQ,CACXY,GAAI,GACJX,KAAM,GACNC,IAAK,GACLC,GAAI,IANM,E,sDAUd,WACEU,KAAKd,Y,+BAGP,WACEc,KAAKC,SAAS,CACZF,GAAIG,U,oBAoCR,WAAU,IAAD,OACP,EAA0BF,KAAKb,MAAvBC,EAAR,EAAQA,KAAME,EAAd,EAAcA,GAAID,EAAlB,EAAkBA,IACZc,EAAoB,CACxBC,MAAO,WACPC,aAAa,EACbC,eAAgB,KAChBC,cAAc,GAGhB,OACE,yBAAKC,UAAU,OACb,6BAASA,UAAU,cACjB,yBAAKA,UAAU,yBACb,yBAAKA,UAAU,iBAAf,cACA,kBAAC,aAAD,CACEC,MAAOrB,EACPsB,QAAO,aACLC,KAAM,aACHR,GAELS,eAAgB,SAACC,EAAQC,EAAM1B,GAC7B,EAAKa,SAAS,CAAEb,aAItB,yBAAKoB,UAAU,wBACb,yBAAKA,UAAU,iBAAf,aACA,kBAAC,aAAD,CACEC,MAAOpB,EACPqB,QAAO,aACLC,KAAM,OACHR,GAELS,eAAgB,SAACC,EAAQC,EAAMzB,GAC7B,EAAKY,SAAS,CAAEZ,YAItB,yBAAKmB,UAAU,uBACb,yBAAKA,UAAU,iBAAf,YACA,kBAAC,aAAD,CACEC,MAAOnB,EACPoB,QAAO,aACLC,KAAM,cACHR,GAELS,eAAgB,SAACC,EAAQC,EAAMxB,GAC7B,EAAKW,SAAS,CAAEX,YAKxB,6BAASkB,UAAU,UACjB,4BAAQO,MAAM,SAASP,UAAU,SAASQ,IAAI,iB,GA1GtCC,cCLhBC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTI,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB7C,QACfuC,UAAUC,cAAcQ,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,4CAMrBC,OAAM,SAAAC,GACLH,QAAQG,MAAM,4CAA6CA,MCzEjEC,IAASC,OAAO,kBAAC,EAAD,MAASlD,SAASmD,eAAe,SDclC,WACb,GAA6C,kBAAmBhB,UAAW,CAGzE,GADkB,IAAIiB,IAAIC,yBAAwBxB,OAAOC,UAC3CwB,SAAWzB,OAAOC,SAASwB,OAIvC,OAGFzB,OAAO0B,iBAAiB,QAAQ,WAC9B,IAAMrB,EAAK,UAAMmB,yBAAN,sBAEP1B,IAiDV,SAAiCO,GAE/BsB,MAAMtB,GACHI,MAAK,SAAAmB,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7C1B,UAAUC,cAAc0B,MAAMxB,MAAK,SAAAC,GACjCA,EAAawB,aAAazB,MAAK,WAC7BT,OAAOC,SAASkC,eAKpB/B,EAAgBC,MAGnBa,OAAM,WACLF,QAAQC,IACN,oEArEAmB,CAAwB/B,GAIxBC,UAAUC,cAAc0B,MAAMxB,MAAK,WACjCO,QAAQC,IACN,gHAMJb,EAAgBC,OCzCxBgC,K","file":"static/js/main.3b5a1ab6.chunk.js","sourcesContent":["\n    import React, { Component } from 'react';\n    import { Controlled as CodeMirror } from 'react-codemirror2';\n    // import Pusher from 'pusher-js';\n    import pushid from 'pushid';\n    // import axios from 'axios';\n    \n    import './App.css';\n    import 'codemirror/lib/codemirror.css';\n    import 'codemirror/theme/material.css';\n    \n    import 'codemirror/mode/htmlmixed/htmlmixed';\n    import 'codemirror/mode/css/css';\n    import 'codemirror/mode/javascript/javascript';\n    \n    class App extends Component {\n      constructor() {\n        super();\n        this.state = {\n          id: '',\n          html: '',\n          css: '',\n          js: '',\n        };\n      }\n    \n      componentDidUpdate() {\n        this.runCode();\n      }\n    \n      componentDidMount() {\n        this.setState({\n          id: pushid(),\n        });\n      }\n    \n      runCode = () => {\n        const { html, css, js } = this.state;\n    \n        const iframe = this.refs.iframe;\n        const document = iframe.contentDocument;\n        const documentContents = `\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n            <meta charset=\"UTF-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n            <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n            <title>Document</title>\n            <style>\n              ${css}\n            </style>\n          </head>\n          <body>\n            ${html}\n    \n            <script type=\"text/javascript\">\n              ${js}\n            </script>\n          </body>\n          </html>\n        `;\n    \n        document.open();\n        document.write(documentContents);\n        document.close();\n      };\n    \n      render() {\n        const { html, js, css } = this.state;\n        const codeMirrorOptions = {\n          theme: 'material',\n          lineNumbers: true,\n          scrollbarStyle: null,\n          lineWrapping: true,\n        };\n    \n        return (\n          <div className=\"App\">\n            <section className=\"playground\">\n              <div className=\"code-editor html-code\">\n                <div className=\"editor-header\">index.html</div>\n                <CodeMirror\n                  value={html}\n                  options={{\n                    mode: 'htmlmixed',\n                    ...codeMirrorOptions,\n                  }}\n                  onBeforeChange={(editor, data, html) => {\n                    this.setState({ html });\n                  }}\n                />\n              </div>\n              <div className=\"code-editor css-code\">\n                <div className=\"editor-header\">index.css</div>\n                <CodeMirror\n                  value={css}\n                  options={{\n                    mode: 'css',\n                    ...codeMirrorOptions,\n                  }}\n                  onBeforeChange={(editor, data, css) => {\n                    this.setState({ css });\n                  }}\n                />\n              </div>\n              <div className=\"code-editor js-code\">\n                <div className=\"editor-header\">index.js</div>\n                <CodeMirror\n                  value={js}\n                  options={{\n                    mode: 'javascript',\n                    ...codeMirrorOptions,\n                  }}\n                  onBeforeChange={(editor, data, js) => {\n                    this.setState({ js });\n                  }}\n                />\n              </div>\n            </section>\n            <section className=\"result\">\n              <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n            </section>\n          </div>\n        );\n      }\n    }\n    \n    export default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}